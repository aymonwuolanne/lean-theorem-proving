import analysis.topology.continuity
import category_theory.examples.topological_spaces
import analysis.real
import category_theory.limits.binary_products
import category_theory.examples.Top.products
import piecewise 
import order_aux

universe u
noncomputable theory

open category_theory.examples
open category_theory.limits
open category_theory

local attribute [instance] has_binary_product_of_has_product

@[reducible] def I := {x : ‚Ñù // 0 ‚â§ x ‚àß x ‚â§ 1}
def ùïÄ : Top := { Œ± := I, str := by apply_instance}

-- proofs that 0, 1 and 1/2 are contained in I
lemma I_contains_0 : 0 ‚â§ (0 : ‚Ñù) ‚àß (0 : ‚Ñù) ‚â§ 1 := 
  ‚ü®le_refl 0, le_of_lt zero_lt_one‚ü©
lemma I_contains_1 : 0 ‚â§ (1 : ‚Ñù) ‚àß (1 : ‚Ñù) ‚â§ 1 := 
  ‚ü®le_of_lt zero_lt_one, le_refl 1‚ü©
lemma I_contains_half : 0 ‚â§ (1/2 : ‚Ñù) ‚àß (1/2 : ‚Ñù) ‚â§ 1 := 
  ‚ü®le_of_lt one_half_pos, le_of_lt one_half_lt_one‚ü©
-- shorthands for 0, 1 and 1/2 as elements of I
def I_0    : I := ‚ü® 0, I_contains_0 ‚ü© 
def I_1    : I := ‚ü® 1, I_contains_1 ‚ü©
def I_half : I := ‚ü® 1/2, I_contains_half ‚ü©

-- says that the path has initial point x and final point y
def path_prop {X : Top} (x y : X.Œ±) (map : ùïÄ ‚ü∂ X) : Prop := map.val I_0 = x ‚àß map.val I_1 = y

structure path {X : Top} (x y : X.Œ±) := 
(map : ùïÄ ‚ü∂ X)
(property : path_prop x y map)

def const_map (X Y : Top) (y : Y.Œ±) : X ‚ü∂ Y := 
{ val := (Œª x, y), 
  property := continuous_const }

-- a homotopy of paths is a map F from I √ó I ‚Üí X such that 
--   F(s,0) = f
--   F(s,1) = g 
--   F(s,t) is a path from x to y for a fixed t
structure homotopy {X : Top} {x y : X.Œ±} (f g : path x y) :=
  (F : limits.prod ùïÄ ùïÄ ‚ü∂ X)
  (left : prod.lift (ùüô ùïÄ) (const_map ùïÄ ùïÄ I_0) ‚â´ F = f.map)
  (right : prod.lift (ùüô ùïÄ) (const_map ùïÄ ùïÄ I_1) ‚â´ F = g.map)
  (endpts : ‚àÄ t : I, path_prop x y (prod.lift (ùüô ùïÄ) (const_map ùïÄ ùïÄ t) ‚â´ F))

def homotopic {X : Top} {x y : X.Œ±} (f g : path x y) := nonempty (homotopy f g)


namespace homotopic
-- we want to show that homotopic is an equivalence relation

-- given a map f this returns the homotopy from f to itself
def id_htpy {X : Top} (f : ùïÄ ‚ü∂ X) : limits.prod ùïÄ ùïÄ ‚ü∂ X := limits.prod.fst ùïÄ ùïÄ ‚â´ f

@[refl] theorem refl {X : Top} {x y : X.Œ±} (f : path x y) : homotopic f f := ‚ü® {
  F := id_htpy f.map, 
  left := by rw [id_htpy, ‚Üê category.assoc]; simp,
  right := by rw [id_htpy, ‚Üêcategory.assoc]; simp,
  endpts := Œª t, f.property
} ‚ü©

@[symm] theorem symm {X : Top} {x y : X.Œ±} (f g : path x y) : homotopic f g ‚Üí homotopic g f := sorry 

@[trans] theorem trans {X : Top} {x y : X.Œ±} (f g h : path x y) : homotopic f g ‚Üí homotopic g h ‚Üí homotopic f h := 
sorry  

end homotopic


namespace I_lemmas

lemma in_I_of_le_half (x : I) (h : x.val ‚â§ 1/2) : 0 ‚â§ 2 * x.val ‚àß 2 * x.val ‚â§ 1 := 
  ‚ü® zero_le_mul (le_of_lt two_pos) (x.property.left), 
  calc 
  2 * x.val ‚â§ 2 * (1/2) : mul_le_mul_of_nonneg_left h (le_of_lt two_pos)
  ...       = 2 * 2‚Åª¬π   : by rw [one_div_eq_inv]
  ...       = 1         : mul_inv_cancel (ne_of_gt two_pos) ‚ü©

lemma in_I_of_not_le_half (x : I) (h : ¬¨ x.val ‚â§ 1/2) : 
  0 ‚â§ 2 * x.val - 1 ‚àß 2 * x.val - 1 ‚â§ 1 := 
  begin 
    apply and.intro, 
    have h‚ÇÅ : 2 * x.val ‚â• 2 * (1/2),
      from mul_le_mul_of_nonneg_left (le_of_lt (lt_of_not_ge' h)) (le_of_lt two_pos),
    calc 
      2 * x.val - 1 ‚â• 2 * (1/2) - 1 : add_le_add_right' h‚ÇÅ
      ...           = 2 * 2‚Åª¬π - 1   : by rw [one_div_eq_inv]
      ...           = 1 - 1         : by rw [mul_inv_cancel (ne_of_gt two_pos)]
      ...           = 0             : sub_self 1,
    have h‚ÇÅ : 2 * x.val ‚â§ 2 * 1, 
      from mul_le_mul_of_nonneg_left (x.property.right) (le_of_lt two_pos),
    calc 
      2 * x.val - 1 ‚â§ 2 * 1 - 1 : add_le_add_right' h‚ÇÅ
      ...           = 2 - 1       : by rw [mul_one]
      ...           = 1 + 1 - 1   : rfl
      ...           = 1 + (1-1)   : add_assoc 1 1 (-1)
      ...           = 1 + 0       : by rw [sub_self]
      ...           = 1           : add_zero 1
  end  

lemma half_x_in_I (x : I) : 0 ‚â§ (1/2) * x.val ‚àß (1/2) * x.val ‚â§ 1 := ‚ü®
  calc
    (1/2) * x.val ‚â• (1/2) * 0 : mul_le_mul_of_nonneg_left x.property.left (le_of_lt one_half_pos)
    ...           = 0         : mul_zero (1/2) ,
  calc 
    (1/2) * x.val ‚â§ (1/2) * 1 : mul_le_mul_of_nonneg_left x.property.right (le_of_lt one_half_pos)
    ...           = (1/2)     : mul_one (1/2) 
    ...           ‚â§ 1         : le_of_lt (one_half_lt_one) 
  ‚ü© 

  lemma half_x_add_one_in_I (x : I) : 0 ‚â§ (1/2) * (x.val + 1) ‚àß (1/2) * (x.val + 1) ‚â§ 1 := ‚ü®
  calc 
    (1/2) * (x.val + 1) = (1/2)*x.val + (1/2)*1 : left_distrib (1/2) x.val 1
    ...                 = (1/2)*x.val + (1/2)   : by rw [mul_one]
    ...                 ‚â• (1/2)*x.val + 0       : add_le_add_left (le_of_lt one_half_pos) (1/2 * x.val)
    ...                 = (1/2)*x.val           : add_zero (1/2 * x.val)
    ...                 ‚â• (1/2) * 0             : mul_le_mul_of_nonneg_left x.property.left (le_of_lt one_half_pos)
    ...                 = 0                     : mul_zero (1/2),
  have h‚ÇÅ : x.val + 1 ‚â§ 1 + 1, 
    from add_le_add_right' x.property.right, 
  calc 
    1/2 * (x.val + 1) ‚â§ (1/2) * (1 + 1) : mul_le_mul_of_nonneg_left h‚ÇÅ (le_of_lt one_half_pos)
    ...               = (1/2) * 2       : rfl 
    ...               = 2‚Åª¬π * 2         : by rw [one_div_eq_inv]
    ...               = 1               : inv_mul_cancel (ne_of_gt two_pos) 
 ‚ü©

lemma half_x_le_half (x : I) : (1/2) * x.val ‚â§ 1/2 := 
  calc 
    (1/2) * x.val ‚â§ (1/2) * 1  : mul_le_mul_of_nonneg_left x.property.right (le_of_lt one_half_pos)
    ...           = (1/2)      : mul_one (1/2)

lemma half_x_add_one_ge_half (x : I) : 1/2 ‚â§ (1/2) * (x.val + 1) := 
  have h‚ÇÅ : 1 ‚â§ x.val + 1,
  from 
    calc
      x.val + 1 ‚â• 0 + 1  : add_le_add_right' x.property.left 
      ...       = 1      : zero_add 1,
  calc 
    (1/2) * (x.val + 1) ‚â• (1/2) * 1  : mul_le_mul_of_nonneg_left h‚ÇÅ (le_of_lt one_half_pos)
    ...                 = 1/2        : mul_one (1/2)

    
end I_lemmas

open I_lemmas

def first_half {X : Top} (f : I ‚Üí X.Œ±) (x : I) (hc : x ‚â§ I_half) := 
  f ‚ü® 2 * x.val, in_I_of_le_half x hc ‚ü©

def second_half {X : Top} (g : I ‚Üí X.Œ±) (x : I) (hnc : ¬¨ x ‚â§ I_half) := 
  g ‚ü® 2 * x.val - 1, in_I_of_not_le_half x hnc ‚ü©

-- the composition of two paths in X
def path_comp_map {X : Top} (f g : I ‚Üí X.Œ±) : I ‚Üí X.Œ± := 
  Œª x, dite (x ‚â§ I_half)
       (first_half f x)
       (second_half g x)

-- the inclusion of I into [0,1/2]
def i_1 : I ‚Üí I := Œª x, ‚ü® (1/2) * x.val , half_x_in_I x ‚ü©

-- the inclusion of I into [1/2, 1] 
def i_2 : I ‚Üí I := Œª x, ‚ü® (1/2) * (x.val + 1), half_x_add_one_in_I x ‚ü©

lemma I_self_pushout : ‚àÄ {s : set I}, is_open (i_1 ‚Åª¬π' s) ‚Üí is_open (i_2 ‚Åª¬π' s) ‚Üí is_open s :=  
  -- outline :
  -- use is_open_metric and prove the metric space definition
  -- split into the cases x < 1/2, x = 1/2, and x > 1/2
  Œª s hs1 hs2, is_open_metric.mpr (
    Œª x hx,
    have h‚ÇÅ : (x < I_half) ‚à® (x = I_half) ‚à® (x > I_half), 
      from lt_trichotomy x I_half,
    have hlt : x < I_half ‚Üí ‚àÉ Œµ > 0, ball x Œµ ‚äÜ s, 
      from sorry, 
    have heq : x = I_half ‚Üí ‚àÉ Œµ > 0, ball x Œµ ‚äÜ s, 
      from sorry,
    have hgt : x > I_half ‚Üí ‚àÉ Œµ > 0, ball x Œµ ‚äÜ s,
      from sorry, 
    
    or.elim h‚ÇÅ hlt (Œª h, or.elim h heq hgt)
  )

lemma commutes_1 {X : Top} (f g : I ‚Üí X.Œ±) (h : f I_1 = g I_0) : path_comp_map f g ‚àò i_1 = f := 
funext (Œª x, 
  have h‚ÇÅ : (path_comp_map f g ‚àò i_1) x = first_half f (i_1 x) (half_x_le_half x), 
    from dif_pos (half_x_le_half x), 
  have h‚ÇÇ : 2 * (i_1 x).val = x.val, from
    calc 
      2 * (1/2 * x.val) = (2 * (1/2)) * x.val  : symm (mul_assoc 2 (1/2) x.val)
      ...               = (2 * 2‚Åª¬π) * x.val    : by rw [one_div_eq_inv]
      ...               = 1 * x.val            : by rw [mul_inv_cancel (ne_of_gt two_pos)]
      ...               = x.val                : one_mul x.val,
  have h‚ÇÉ : f ‚ü® 2 * (i_1 x).val, _ ‚ü© = f x, 
    from congr_arg f (subtype.eq h‚ÇÇ),
  trans h‚ÇÅ h‚ÇÉ
  )

lemma commutes_2 {X : Top} (f g : I ‚Üí X.Œ±) (h : f I_1 = g I_0) : path_comp_map f g ‚àò i_2 = g := 
funext $ Œª x,
  have h‚ÇÅ : i_2 x ‚â• I_half,
    from half_x_add_one_ge_half x,
  or.elim (eq_or_lt_of_le h‚ÇÅ) 
    ( Œª heq,
    have heq‚ÇÅ : i_2 x ‚â§ I_half, 
      from le_of_eq (symm heq),
    have heq‚ÇÖ : x = I_0, 
      begin 
        apply subtype.eq, 
        have h‚ÇÅ : 1 = x.val + 1, 
          calc 
            (1:‚Ñù) = 2 * 2‚Åª¬π                   : symm (mul_inv_cancel (ne_of_gt two_pos))
            ...   = 2 * (1/2)                 : by rw [one_div_eq_inv] 
            ...   = 2 * (1/2 * (x.val + 1))   : congr_arg (has_mul.mul 2) (subtype.ext.mp heq)
            ...   = (2 * (1/2)) * (x.val + 1) : symm (mul_assoc 2 (1/2) (x.val + 1))
            ...   = (2 * 2‚Åª¬π) * (x.val + 1)   : by rw [one_div_eq_inv]
            ...   = 1 * (x.val + 1)           : by rw [mul_inv_cancel (ne_of_gt two_pos)]
            ...   = x.val + 1                 : one_mul (x.val + 1),
        calc 
          x.val = x.val + 0       : symm (add_zero x.val)
          ...   = x.val + (1 - 1) : by rw [sub_self] 
          ...   = x.val + 1 - 1   : symm (add_assoc x.val 1 (-1))
          ...   = 1 - 1           : by rw [‚Üêh‚ÇÅ]
          ...   = 0               : sub_self 1
      end,
    have heq‚ÇÇ : (path_comp_map f g ‚àò i_2) x = first_half f (i_2 x) heq‚ÇÅ,
      from dif_pos heq‚ÇÅ,
    begin
    rw [heq‚ÇÇ, first_half],
    have heq‚ÇÉ : 2 * (i_2 x).val = 1,
      calc 
        2 * (i_2 x).val = 2 * (I_half).val : by rw [heq] 
        ...             = 2 * (1/2)        : rfl 
        ...             = 2 * (2‚Åª¬π)        : by rw [one_div_eq_inv]
        ...             = 1                : mul_inv_cancel (ne_of_gt two_pos), 
    have heq‚ÇÑ : f ‚ü® 2 * (i_2 x).val, in_I_of_le_half (i_2 x) heq‚ÇÅ ‚ü© = f I_1, 
      exact congr_arg f (subtype.eq heq‚ÇÉ),
    rw [heq‚ÇÑ],
    rw [heq‚ÇÖ],
    assumption
    end )

    (Œª hlt,
    have h‚ÇÅ : ¬¨ (i_2 x) ‚â§ I_half,
      from not_le_of_gt hlt,
    have h‚ÇÇ : (path_comp_map f g ‚àò i_2) x = second_half g (i_2 x) h‚ÇÅ,
      from dif_neg h‚ÇÅ,
    have h‚ÇÉ : 2 * (i_2 x).val - 1 = x.val, 
      from calc 
        2 * (i_2 x).val - 1 = 2 * (1/2 * (x + 1)) - 1  : rfl 
        ...                 = 2 * (2‚Åª¬π * (x + 1)) - 1  : by rw [one_div_eq_inv]
        ...                 = (2 * 2‚Åª¬π) * (x + 1) - 1  : by rw [mul_assoc]
        ...                 = 1 * (x + 1) - 1          : by rw [mul_inv_cancel (ne_of_gt two_pos)]
        ...                 = x + 1 - 1                : by rw [one_mul] 
        ...                 = x + (1 - 1)              : add_assoc x 1 (-1)
        ...                 = x + 0                    : by rw [sub_self] 
        ...                 = x                        : add_zero x,
    have h‚ÇÑ : g ‚ü® 2 * (i_2 x).val - 1, in_I_of_not_le_half (i_2 x) h‚ÇÅ ‚ü© = g x,
      from congr_arg g (subtype.eq h‚ÇÉ), 
    trans h‚ÇÇ h‚ÇÑ
    )

lemma path_comp_continuous {X : Top} (f g : I ‚Üí X.Œ±) (hf : continuous f) (hg : continuous g)
  (h : f I_1 = g I_0) : continuous (path_comp_map f g) := begin
    intros s hs,
    have h‚ÇÅ : is_open (i_1 ‚Åª¬π' (path_comp_map f g ‚Åª¬π' s)), 
      have h‚ÇÅ‚ÇÇ : i_1 ‚Åª¬π' (path_comp_map f g ‚Åª¬π' s) = path_comp_map f g ‚àò i_1 ‚Åª¬π' s := rfl,
      rw [h‚ÇÅ‚ÇÇ, commutes_1 f g h], 
      exact hf s hs,
    have h‚ÇÇ : is_open (i_2 ‚Åª¬π' (path_comp_map f g ‚Åª¬π' s)), 
      have h‚ÇÇ‚ÇÇ : i_2 ‚Åª¬π' (path_comp_map f g ‚Åª¬π' s) = path_comp_map f g ‚àò i_2 ‚Åª¬π' s := rfl,
      rw [h‚ÇÇ‚ÇÇ, commutes_2 f g h],
      exact hg s hs,
    exact I_self_pushout h‚ÇÅ h‚ÇÇ
  end

-- this defines the type of homotopy classes of paths from x to y
def htpy_class {X : Top} (x y : X.Œ±) := quot (@homotopic X x y) 

-- to define the fundamental group(oid) we need to instantiate the category of paths in X
-- with homotopy classes of paths as morphisms between each point. 
def paths (X : Top) := X.Œ± 

-- TODO
def path_composition {X : Top} {x y z : paths X} (f : path x y) (g : path y z) : path x z := {
  map := {val := path_comp_map f.map g.map, 
    property := path_comp_continuous f.map.val g.map.val f.map.property g.map.property 
      (trans f.property.right (symm g.property.left) )
      }, 
  property := sorry
} 

-- [f][g] = [fg]
def composition {X : Top} {x y z : paths X} (f : path x y) : htpy_class y z ‚Üí htpy_class x z := 
  quot.lift 
    (Œª g, quot.mk (@homotopic X x z) (path_composition f g)) 
    (Œª a b (h : homotopic a b), quot.sound sorry)
  -- want h : quot.mk (@homotopic X x z) (path_composition f a) = quot.mk (@homotopic X x z) (path_composition f b)
  -- using quot.sound it is enough to have 
  -- h : homotopic (path_composition f a) (homotopic path_composition f b)
  -- TODO ^that

instance (X : Top) : category (paths X) := {
  hom      := Œª x y, htpy_class x y, 
  id       := Œª x, quot.mk (Œª f g, homotopic f g) 
    { map := const_map ùïÄ X x, property := by tidy },
  comp     := sorry,
  assoc'   := sorry, 
  comp_id' := sorry, 
  id_comp' := sorry
  } 

def fundamental_group (X : Top) (x : paths X) : Type := sorry 