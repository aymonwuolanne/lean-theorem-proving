import analysis.topology.continuity
import category_theory.examples.topological_spaces
import analysis.real
import analysis.normed_space
import category_theory.limits.binary_products
import category_theory.examples.Top.products


noncomputable theory

open category_theory.examples
open category_theory.limits
open category_theory

local attribute [instance] has_binary_product_of_has_product
def I := {x : ‚Ñù | 0 ‚â§ x ‚àß x ‚â§ 1} 
def ùïÄ : Top := { Œ± := I }

def path (X : Top) := ùïÄ ‚ü∂ X

-- proving that 0 and 1 are in fact contained in I
lemma I_contains_0 : (0 : ‚Ñù) ‚àà I := 
‚ü®le_refl 0, le_of_lt zero_lt_one‚ü©
lemma I_contains_1 : (1 : ‚Ñù) ‚àà I := 
‚ü®le_of_lt zero_lt_one, le_refl 1‚ü©
-- shorthands for 0 and 1 as elements of I
def I_0 : I := ‚ü® 0, I_contains_0 ‚ü© 
def I_1 : I := ‚ü® 1, I_contains_1 ‚ü©

-- loops are defined as paths that have the same endpoints
def loop (X : Top) := subtype (Œª (Œ≥ : path X), Œ≥.val I_0 = Œ≥.val I_1)


def homotopy {X Y : Top} (f g : X ‚ü∂ Y) := {F : limits.prod X ùïÄ ‚ü∂ Y // true }

def constant_0 (X : Top) := Œª (x : X.Œ±), 0 
def constant_1 (X : Top) := Œª (x : X.Œ±), 1



